# LOBO 1.0 - Intelligent RAG System - Production Configuration

# Core Components
enable_hybrid_search: true
enable_reranking: true
enable_multimodal: true
enable_federation: true
enable_caching: true
enable_monitoring: true
enable_security: true

# Performance Settings
max_concurrent_searches: 20
cache_ttl: 7200
timeout_seconds: 60
batch_size: 64

# Advanced Features
enable_continuous_learning: true
enable_ab_testing: true
enable_self_querying: true
enable_knowledge_graph: true
enable_llm_orchestration: true

# Federation Settings
federation_max_nodes: 10
federation_privacy_mode: strict

# Security Settings
encryption_enabled: true
audit_logging: true
content_moderation: true

# LLM Configuration
llm_endpoints:
  openai: 
    api_key: ${OPENAI_API_KEY}
    base_url: https://api.openai.com/v1
    models:
      - gpt-4-turbo
      - gpt-4
      - gpt-3.5-turbo
  anthropic:
    api_key: ${ANTHROPIC_API_KEY}
    models:
      - claude-3-opus-20240229
      - claude-3-sonnet-20240229
      - claude-3-haiku-20240307
  together:
    api_key: ${TOGETHER_API_KEY}
    models:
      - llama-3-70b
      - mixtral-8x7b
  google:
    api_key: ${GOOGLE_API_KEY}
    models:
      - gemini-pro

# Vector Stores
vector_stores:
  primary:
    type: chroma
    path: /app/data/chroma
    collection_name: main_collection
  secondary:
    type: qdrant
    url: http://qdrant:6333
    collection_name: secondary_collection
  elasticsearch:
    type: elasticsearch
    url: http://elasticsearch:9200
    index_name: rag_documents

# Retrieval Strategies
retrieval_strategies:
  default: ["hybrid_search", "vector_similarity", "keyword_search"]
  complex: ["self_querying", "graph_based", "federated"]
  multimodal: ["multimodal", "hybrid_search"]
  technical: ["semantic_search", "code_search", "hybrid_search"]
  creative: ["creative_search", "multimodal", "hybrid_search"]

# Caching Configuration
cache:
  redis:
    url: redis://redis:6379
    db: 0
    max_connections: 20
  memory:
    max_size: 1000
    ttl: 3600

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 8001
  grafana:
    enabled: true
    url: http://grafana:3000
  metrics:
    - request_duration
    - error_rate
    - cache_hit_rate
    - llm_usage
    - retrieval_strategy_usage

# Security Configuration
security:
  encryption:
    algorithm: AES-256-GCM
    key_rotation: 30d
  access_control:
    rbac_enabled: true
    default_role: user
  content_moderation:
    enabled: true
    threshold: 0.8
  audit_logging:
    enabled: true
    retention: 90d

# Learning Configuration
learning:
  feedback_processing:
    enabled: true
    batch_size: 100
    processing_interval: 1h
  model_updates:
    embedding_fine_tuning: true
    reranker_fine_tuning: true
    prompt_optimization: true
  evaluation:
    benchmark_updates: true
    performance_tracking: true

# Database Configuration
database:
  postgresql:
    url: postgresql://user:pass@db:5432/rag
    pool_size: 20
    max_overflow: 30
  redis:
    url: redis://redis:6379
    db: 1

# Logging Configuration
logging:
  level: INFO
  format: json
  handlers:
    - console
    - file
  file:
    path: /app/logs/rag_system.log
    max_size: 100MB
    backup_count: 5

# API Configuration
api:
  host: 0.0.0.0
  port: 8000
  workers: 4
  timeout: 300
  max_request_size: 10MB
  cors:
    enabled: true
    origins: ["*"]
    methods: ["GET", "POST", "PUT", "DELETE"]
    headers: ["*"]

# Deployment Configuration
deployment:
  environment: production
  scaling:
    min_replicas: 2
    max_replicas: 10
    target_cpu: 70
  health_checks:
    enabled: true
    interval: 30s
    timeout: 10s
    retries: 3
