// NextEleven Tattoo Pro - APOLLO Powered Database Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      String   @default("CUSTOMER") // ADMIN, ARTIST, CUSTOMER
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  customers Customer[]

  @@map("users")
}

model Artist {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  phone       String
  specialty   String   // JSON string of specialties
  bio         String
  hourlyRate  Float
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  appointments Appointment[]
  portfolio    Portfolio[]
  availability Availability[]

  @@map("artists")
}

model Customer {
  id                String   @id @default(cuid())
  userId            String?  @unique
  name              String
  email             String   @unique
  phone             String
  dateOfBirth       DateTime?
  emergencyContact  String?
  medicalConditions String   // JSON string
  allergies         String   // JSON string
  previousTattoos   String   // JSON string
  preferences       String?  // JSON string for style preferences
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  user         User?         @relation(fields: [userId], references: [id])
  appointments Appointment[]
  payments     Payment[]
  aftercare    Aftercare[]

  @@map("customers")
}

model Appointment {
  id          String   @id @default(cuid())
  customerId  String
  artistId    String
  serviceType String
  date        DateTime
  duration    Int      // in minutes
  price       Float
  status      String   @default("PENDING") // PENDING, CONFIRMED, IN_PROGRESS, COMPLETED, CANCELLED, NO_SHOW
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  customer Customer  @relation(fields: [customerId], references: [id])
  artist   Artist    @relation(fields: [artistId], references: [id])
  payments Payment[]
  aftercare Aftercare?

  @@map("appointments")
}

model Payment {
  id            String   @id @default(cuid())
  appointmentId String
  customerId    String
  amount        Float
  method        String   // CARD, CASH, CRYPTO, DIGITAL_WALLET
  status        String   @default("PENDING") // PENDING, COMPLETED, FAILED, REFUNDED
  transactionId String?
  processedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  customer    Customer    @relation(fields: [customerId], references: [id])

  @@map("payments")
}

model Aftercare {
  id            String   @id @default(cuid())
  appointmentId String   @unique
  customerId    String
  instructions  String   // JSON string
  checkInDates  String   // JSON string
  photos        String   // JSON string of photo URLs
  notes         String?
  completed     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  appointment Appointment @relation(fields: [appointmentId], references: [id])
  customer    Customer    @relation(fields: [customerId], references: [id])

  @@map("aftercare")
}

model Portfolio {
  id          String   @id @default(cuid())
  artistId    String
  title       String
  description String?
  imageUrl    String
  category    String
  tags        String   // JSON string
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  artist Artist @relation(fields: [artistId], references: [id])

  @@map("portfolio")
}

model Availability {
  id        String   @id @default(cuid())
  artistId  String
  dayOfWeek String   // Monday, Tuesday, etc.
  startTime String   // "10:00"
  endTime   String   // "18:00"
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artist Artist @relation(fields: [artistId], references: [id])

  @@map("availability")
}

model Service {
  id               String   @id @default(cuid())
  name             String
  description      String
  basePrice        Float
  estimatedDuration Int    // in minutes
  category         String
  isActive         Boolean @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("services")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String?
  type      String   // APPOINTMENT_REMINDER, PAYMENT_CONFIRMATION, AFTERCARE_REMINDER, SYSTEM_UPDATE, MARKETING
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      String?  // JSON string
  createdAt DateTime @default(now())

  @@map("notifications")
}

model Analytics {
  id        String   @id @default(cuid())
  date      DateTime
  metric    String
  value     Float
  metadata  String?  // JSON string
  createdAt DateTime @default(now())

  @@map("analytics")
}
